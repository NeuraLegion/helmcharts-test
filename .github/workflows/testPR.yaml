name: Update Docker Image Tags

on:
  schedule:
    # Runs once a day at midnight
    - cron: '0 0 * * *'
  # Manual trigger option
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to check (main or unstable)'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - unstable

jobs:
  update-image-tag:
    # Only run on main or unstable branch, or when manually triggered
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/unstable' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # If manually triggered, use specified branch, otherwise use the current branch
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Determine branch and tag prefix
        id: branch-check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch }}"
          else
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
          fi
          
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "tag_prefix=stable-" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "unstable" ]]; then
            echo "tag_prefix=unstable-" >> $GITHUB_OUTPUT
          else
            echo "Unsupported branch: $BRANCH_NAME"
            exit 1
          fi
          
          echo "Running on branch: $BRANCH_NAME, using tag prefix: $(if [[ "$BRANCH_NAME" == "main" ]]; then echo "stable-"; else echo "unstable-"; fi)"

      - name: Check for new Docker image tags with proper timestamp sorting
        id: check-tags
        run: |
          # Docker repository for BrokenCrystals
          DOCKER_REPO="brightsec/brokencrystals"
          TAG_PREFIX="${{ steps.branch-check.outputs.tag_prefix }}"
          
          echo "=== FETCHING ALL TAGS FOR $DOCKER_REPO WITH PREFIX $TAG_PREFIX ==="
          
          # Initialize variables
          NEXT_URL="https://hub.docker.com/v2/repositories/${DOCKER_REPO}/tags?page_size=100"
          TAGS_FILE="all_tags.txt"
          > $TAGS_FILE  # Create empty file
          
          # Paginate through all results
          while [ -n "$NEXT_URL" ]; do
            echo "Fetching page: $NEXT_URL"
            PAGE_DATA=$(curl -s "$NEXT_URL")
            
            # Extract tags matching our prefix and add to file
            echo "$PAGE_DATA" | jq -r '.results[].name' | grep "^${TAG_PREFIX}" >> $TAGS_FILE || true
            
            # Get next page URL or empty string if no more pages
            NEXT_URL=$(echo "$PAGE_DATA" | jq -r '.next // empty')
          done
          
          # Check if we found any tags
          if [ ! -s "$TAGS_FILE" ]; then
            echo "No tags found with prefix: $TAG_PREFIX"
            exit 1
          fi
          
          echo "=== ALL FOUND TAGS WITH PREFIX $TAG_PREFIX ==="
          cat $TAGS_FILE
          
          # Extract timestamp from tags and sort by timestamp (newest last)
          echo "=== PARSING TIMESTAMPS AND SORTING TAGS ==="
          while read -r TAG; do
            # Extract timestamp from tag (assuming format like stable-hash-20250306083625)
            TIMESTAMP=$(echo "$TAG" | grep -oE '[0-9]{14}$' || echo "0")
            echo "$TIMESTAMP $TAG"
          done < $TAGS_FILE | sort -n | tee timestamps_and_tags.txt
          
          # Get the tag with the latest timestamp
          LATEST_TAG=$(tail -n1 timestamps_and_tags.txt | awk '{print $2}')
          
          if [ -z "$LATEST_TAG" ]; then
            echo "ERROR: Could not determine latest tag!"
            exit 1
          fi
          
          echo "=== LATEST TAG FOUND: $LATEST_TAG ==="
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Check current tag in values.yaml
          CURRENT_TAG=$(grep -A1 "images:" charts/brokencrystals/values.yaml | grep "main:" | awk '{print $2}')
          echo "=== CURRENT TAG IN VALUES.YAML: $CURRENT_TAG ==="
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_OUTPUT
          
          # Compare and determine if update is needed
          if [ "$CURRENT_TAG" != "$LATEST_TAG" ]; then
            echo "=== UPDATE NEEDED: YES ==="
            echo "update_needed=true" >> $GITHUB_OUTPUT
          else
            echo "=== UPDATE NEEDED: NO ==="
            echo "update_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Update values.yaml
        if: steps.check-tags.outputs.update_needed == 'true'
        run: |
          LATEST_TAG="${{ steps.check-tags.outputs.latest_tag }}"
          BRANCH_NAME="${{ steps.branch-check.outputs.branch }}"
          
          echo "Updating values.yaml with new tag: $LATEST_TAG"
          
          # Update the values.yaml file
          sed -i "s/main: .*$/main: $LATEST_TAG/" charts/brokencrystals/values.yaml
          
          # Create a branch for the PR
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          PR_BRANCH_NAME="update-docker-image-tag-${LATEST_TAG}"
          git checkout -b $PR_BRANCH_NAME
          
          git add charts/brokencrystals/values.yaml
          git commit -m "Update brokencrystals Docker image tag to $LATEST_TAG"
          git push origin $PR_BRANCH_NAME

      - name: Create Pull Request
        if: steps.check-tags.outputs.update_needed == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Update brokencrystals Docker image tag to ${{ steps.check-tags.outputs.latest_tag }}"
          body: |
            This PR updates the brokencrystals Docker image tag from the current tag to `${{ steps.check-tags.outputs.latest_tag }}`.
            
            **Change Details:**
            ```
            ${{ steps.check-tags.outputs.current_tag }} -> ${{ steps.check-tags.outputs.latest_tag }}
            ```
            
            This update was automatically generated by GitHub Actions.
          branch: update-docker-image-tag-${{ steps.check-tags.outputs.latest_tag }}
          base: ${{ steps.branch-check.outputs.branch }}
          delete-branch: true
